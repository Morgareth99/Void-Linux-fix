#!/usr/bin/env raku




use v6;
use Voidvault;
use Voidvault::Utils;




# -----------------------------------------------------------------------------
# disable-cow
# -----------------------------------------------------------------------------

multi sub MAIN(
    'disable-cow',
    Bool :c(:$clean),
    Str :g(:$group),
    Str :p(:$permissions),
    Bool :r(:$recursive),
    Str :u(:$user),
    *@directory
    --> Nil
)
{
    my %opts;
    %opts<clean> = $clean if $clean;
    %opts<group> = $group if $group;
    %opts<permissions> = $permissions if $permissions;
    %opts<recursive> = $recursive if $recursive;
    %opts<user> = $user if $user;
    Voidvault::Utils.disable-cow(@directory, |%opts);
}




# -----------------------------------------------------------------------------
# gen-pass-hash
# -----------------------------------------------------------------------------

multi sub MAIN('gen-pass-hash', Str:D :p(:$pass)!, Bool :g(:$grub) --> Nil)
{
    say(Voidvault::Utils.gen-pass-hash($pass, :$grub));
}

multi sub MAIN('gen-pass-hash', Bool :g(:$grub) --> Nil)
{
    say(Voidvault::Utils.prompt-pass-hash(:$grub));
}




# -----------------------------------------------------------------------------
# help
# -----------------------------------------------------------------------------

multi sub MAIN('help', 'disable-cow' --> Nil)
{
    USAGE('disable-cow');
}

multi sub MAIN('help', 'gen-pass-hash' --> Nil)
{
    USAGE('gen-pass-hash');
}

multi sub MAIN('help', 'ls' --> Nil)
{
    USAGE('ls');
}

multi sub MAIN('help', 'new' --> Nil)
{
    USAGE('new');
}

multi sub MAIN('help', $? --> Nil)
{
    USAGE();
}




# -----------------------------------------------------------------------------
# new
# -----------------------------------------------------------------------------

multi sub MAIN(
    'new',
    Str $mode?,
    :@repository,
    *%opts (
        Str :admin-name($),
        Str :admin-pass($),
        Str :admin-pass-hash($),
        Bool :augment($),
        Str :device($),
        Bool :disable-ipv6($),
        Str :disk-type($),
        Bool :enable-serial-console($),
        Str :graphics($),
        Str :grub-name($),
        Str :grub-pass($),
        Str :grub-pass-hash($),
        Str :guest-name($),
        Str :guest-pass($),
        Str :guest-pass-hash($),
        Str :hostname($),
        Bool :ignore-conf-repos($),
        Str :keymap($),
        Str :locale($),
        Str :packages($),
        Str :processor($),
        Str :root-pass($),
        Str :root-pass-hash($),
        Str :sftp-name($),
        Str :sftp-pass($),
        Str :sftp-pass-hash($),
        Str :timezone($),
        Str :vault-name($),
        Str :vault-pass($),
        Str :vault-key($)
    )
    --> Nil
)
{
    my Voidvault $voidvault .= new($mode, :@repository, |%opts);
    $voidvault.bootstrap;
}

multi sub MAIN(
    'new',
    Str $mode?,
    :$repository,
    *%opts (
        Str :admin-name($),
        Str :admin-pass($),
        Str :admin-pass-hash($),
        Bool :augment($),
        Str :device($),
        Bool :disable-ipv6($),
        Str :disk-type($),
        Bool :enable-serial-console($),
        Str :graphics($),
        Str :grub-name($),
        Str :grub-pass($),
        Str :grub-pass-hash($),
        Str :guest-name($),
        Str :guest-pass($),
        Str :guest-pass-hash($),
        Str :hostname($),
        Bool :ignore-conf-repos($),
        Str :keymap($),
        Str :locale($),
        Str :packages($),
        Str :processor($),
        Str :root-pass($),
        Str :root-pass-hash($),
        Str :sftp-name($),
        Str :sftp-pass($),
        Str :sftp-pass-hash($),
        Str :timezone($),
        Str :vault-name($),
        Str :vault-pass($),
        Str :vault-key($)
    )
    --> Nil
)
{
    my @repository = $repository;
    my Voidvault $voidvault .= new($mode, :@repository, |%opts);
    $voidvault.bootstrap;
}




# -----------------------------------------------------------------------------
# ls
# -----------------------------------------------------------------------------

multi sub MAIN('ls', 'keymaps' --> Nil)
{
    Voidvault::Utils.ls-keymaps.map({ .say });
}

multi sub MAIN('ls', 'locales' --> Nil)
{
    Voidvault::Utils.ls-locales.map({ .say });
}

multi sub MAIN('ls', 'devices' --> Nil)
{
    Voidvault::Utils.ls-devices.map({ .say });
}

multi sub MAIN('ls', 'timezones' --> Nil)
{
    Voidvault::Utils.ls-timezones.map({ .say });
}




# -----------------------------------------------------------------------------
# version
# -----------------------------------------------------------------------------

multi sub MAIN(Bool:D :version($)! where .so --> Nil)
{
    printf("v%s\n", $Voidvault::VERSION);
    exit(0);
}




# -----------------------------------------------------------------------------
# usage
# -----------------------------------------------------------------------------

multi sub USAGE(--> Nil)
{
    constant $HELP = q:to/EOF/.trim;
    Usage:
      voidvault <command>

    Commands:
      disable-cow          Disable copy-on-write on directories
      gen-pass-hash        Generate password hash
      help                 Show help for subcommands
      ls                   List devices, keymaps, locales, timezones
      new                  Bootstrap Void system with FDE

    Options:
      -h, --help
        Print this help message
      --version
        Print version and exit
    EOF
    say($HELP);
}

multi sub USAGE('disable-cow' --> Nil)
{
    constant $HELP = qq:to/EOF/.trim;
    Usage:
      voidvault [--clean]
                [--permissions=<octal>]
                [--user=<username>]
                [--group=<groupname>]
                disable-cow <directory> [<directory> <directory>..]
      voidvault [-r] disable-cow <directory> [<directory> <directory>..]

    Options:
      -c, --clean
        Remake directories with CoW disabled
      -r, --recursive
        Recursively disable CoW on directories
      -p, --permissions=<octal>
        Octal file mode bits (defaults to "755")
      -u, --user=<username>
        Named user to own file (defaults to "$*USER")
      -g, --group=<groupname>
        Named group to own file (defaults to "$*GROUP")

    Positionals:
      <directory>        Path to directory
    EOF
    say($HELP);
}

multi sub USAGE('gen-pass-hash' --> Nil)
{
    constant $HELP = q:to/EOF/.trim;
    Usage:
      voidvault [-g|--grub] [-p|--pass=<password>] gen-pass-hash

    Options:
      -g, --grub
        Generate PBKDF2 password hash for GRUB
      -p, --pass=<password>
        Plaintext password to generate hash from
    EOF
    say($HELP);
}

multi sub USAGE('ls' --> Nil)
{
    constant $HELP = q:to/EOF/.trim;
    Usage:
      voidvault ls <positional>

    Positionals
      devices           List available block devices
      keymaps           List available keyboard table descriptions
      locales           List available sets of language/cultural rules
      timezones         List available geographic regions
    EOF
    say($HELP);
}

multi sub USAGE('new' --> Nil)
{
    constant $HELP = q:to/EOF/.trim;
    Usage:
      voidvault [options] new [mode]

      voidvault [--admin-name=<username>] [--admin-pass=<password>]
                [--guest-name=<username>] [--guest-pass=<password>]
                [--sftp-name=<username>] [--sftp-pass=<password>]
                [--grub-name=<username>] [--grub-pass=<password>]
                [--root-pass=<password>]
                [--vault-name=<vaultname>] [--vault-pass=<password>]
                [--vault-key=<path>]
                [--device=<device>] [--hostname=<hostname>]
                [--processor=<processor>] [--graphics=<graphics>]
                [--disk-type=<disktype>] [--locale=<locale>]
                [--keymap=<keymap>] [--timezone=<timezone>]
                [--repository=<repository>] [--ignore-conf-repos]
                [--packages=<packages>]
                [--augment]
                [--disable-ipv6] [--enable-serial-console]
                new

      voidvault [--bootvault-name=<vaultname>] [--bootvault-pass=<password>]
                [--bootvault-key=<path>]
                new 1fa

    Options:
      --admin-name=<username>
        User name for admin account
      --admin-pass=<password>
        Password for admin account
      --admin-pass-hash=<passhash>
        Encrypted password hash for admin account
      --augment
        Drop to Bash console mid-execution
      --device=<device>
        Target block device for install
      --disable-ipv6
        Disable IPv6
      --disk-type=<disktype>
        Hard drive type
      --enable-serial-console
        Enable serial console
      --graphics=<graphics>
        Graphics card type
      --grub-name=<username>
        User name for GRUB
      --grub-pass=<password>
        Password for GRUB
      --grub-pass-hash=<passhash>
        Password hash for GRUB
      --guest-name=<username>
        User name for guest account
      --guest-pass=<password>
        Password for guest account
      --guest-pass-hash=<passhash>
        Encrypted password hash for guest account
      --hostname=<hostname>
        Hostname
      --ignore-conf-repos
        Only honor repositories specified on cmdline
      --keymap=<keymap>
        Keymap
      --locale=<locale>
        Locale
      --packages=<packages>
        List of additional packages to install
      --processor=<processor>
        Processor type
      --repository=<repository>
        Location of Void package repository (prioritized)
      --root-pass=<password>
        Password for root account
      --root-pass-hash=<passhash>
        Encrypted password hash for root account
      --sftp-name=<username>
        User name for SFTP account
      --sftp-pass=<password>
        Password for SFTP account
      --sftp-pass-hash=<passhash>
        Encrypted password hash for SFTP account
      --timezone=<timezone>
        Timezone
      --vault-name=<vaultname>
        Name for LUKS encrypted volume
      --vault-pass=<password>
        Password for LUKS encrypted volume
      --vault-key=<path>
        Path to LUKS encrypted volume key

    Options (1FA):
      --bootvault-name=<vaultname>
        Name for LUKS encrypted boot volume
      --bootvault-pass=<password>
        Password for LUKS encrypted boot volume
      --bootvault-key=<path>
        Path to LUKS encrypted boot volume key

    Arguments:
      mode      Activate mode

    Mode
      | base (Default)
      |
      | | Make LUKS1 vault with encrypted /boot
      |
      | 1fa
      |
      | | Make LUKS2 vault with detached header inside LUKS1 boot partition
      | |
      | | Make LUKS1 boot partition on same device as LUKS2 vault
    EOF
    say($HELP);
}

# vim: set filetype=raku foldmethod=marker foldlevel=0:
